local argparse = require "argparse"
local cURL = require "cURL"
local socket = require "socket"

local parser = argparse("speedtest", "Finds optimal server, measures download and upload speeds")

local find_servers = parser:command("find_servers", "By default selects optimal server from /tmp/filtered_servers file if the file exists")
find_servers:option("-s --server", "Measures specified server\'s latency")
find_servers:option("-d --dump", "Writes data as JSON format", "/tmp/optimal_server")
find_servers:option("-c --count", "Gets first N optimal servers", "1")
find_servers:flag("-q --quiet", "Hides all of the output")

local measure_download = parser:command("measure_download", "Measures download speed")
measure_download:option("-s --server", "Downloads file from specified server")
measure_download:flag("-q --quiet", "Hides all of the output")

local measure_upload = parser:command("measure_upload", "Measures upload speed")
measure_upload:option("-s --server", "Uploads file to specified server")
measure_upload:flag("-q --quiet", "Hides all of the output")

local args = parser:parse()

function Dump(o)
    if type(o) == 'table' then
       local s = '{ '
       for k,v in pairs(o) do
          if type(k) ~= 'number' then k = '"'..k..'"' end
          s = s .. '['..k..'] = ' .. Dump(v) .. ','
       end
       return s .. '} '
    else
       return tostring(o)
    end
 end

function Split (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        table.insert(t, str)
    end
    return t
end

function Is_array(T)
    local i = 0
    for _ in pairs(T) do
        i = i + 1
        if T[i] == nil then return false end
    end
    return true
  end

function Get_key_count(T)
    local length = 0
    for _, _ in pairs(T) do
        length = length + 1
    end
    return length
end

function Get_first_n_values(T, n)
    if n < 1 then return end
    local values = {}
    for k, v in pairs(T) do
        table.insert(values, v)
        if k == n then
            break
        end
    end
    return values
end

function Write_as_json(filename, params)
    local function write_object(file, T, idx, key_count)
        for k, v in pairs(T) do
            idx = idx + 1
            if type(v) == "number" then
                file:write("\"" .. k .. "\":" .. v .. "")
            else
                file:write("\"" .. k .. "\":\"" .. v .. "\"")
            end
            if idx ~= key_count then
                file:write(",")
            end
        end
    end
    if params == nil then return end
    local size = table.getn(params)
    if size == 0 then return end
    local key_count = Get_key_count(params[1])
    local file = io.open(filename, "w")
    local idx = 0
    file:write("[")
    for key, value in pairs(params) do
        file:write("{")
        write_object(file, value, idx, key_count)
        file:write("}")
        if key ~= size then
            file:write(",")
        end
        idx = 0
    end
    file:write("]\n")
    io.close(file)
end

function Find_servers()
    if tonumber(args.count) < 1 then return end
    local f = io.open("/dev/null", "w")
    if args.server ~= nil then
        if not args.quiet then
            print(string.format("%-35s %-15s %-8s", "Server", "Response_code", "Total_time"))
        end
        if not pcall(function ()
            local c = cURL.easy{
                url = Split(args.server, ":")[1],
                writefunction = f,
                timeout = 1
            }
            c:perform()
            local code = c:getinfo_response_code()
            if not args.quiet then
                print(string.format("%-35s %-15s %-8s", args.server, code, c:getinfo_total_time()))
            end
            c:close()
        end) then
            if not args.quiet then
                print(string.format("%-35s %-15s %-8s", args.server, 500, -1))
            end
        end
        return
    end
    local filtered_servers_file = io.open("/tmp/filtered_servers", "r")
    if filtered_servers_file == nil then
        print("File is missing!")
        return
    end
    local size = filtered_servers_file:seek("end")
    if size == 0 then
        print("File does not contain any records!")
        io.close(filtered_servers_file)
        return
    end
    if not args.quiet then
        print(string.format("%-35s %-15s %-8s", "Server", "Response_code", "Total_time"))
    end
    local servers = {}
    for server in io.lines("/tmp/filtered_servers") do
        if not pcall(function ()
            local c = cURL.easy{
                url = Split(server, ":")[1],
                writefunction = f,
                timeout = 1
            }
            local ok = c:perform()
            local code = c:getinfo_response_code()
            local total_time = c:getinfo_total_time()
            if not args.quiet then
                print(string.format("%-35s %-15s %-8s", server, code, total_time))
            end
            if ok and code == 200 then
                table.insert(servers, {server = server, total_time = total_time, code = code})
            end
            c:close()
        end) then
            if not args.quiet then
                print(string.format("%-35s %-15s %-8s", server, 500, -1))
            end
        end
    end
    io.close(f)
    table.sort(servers, function (time1, time2) return time1.total_time < time2.total_time end )
    if args.dump ~= nil then
        Write_as_json(args.dump, Get_first_n_values(servers, tonumber(args.count)))
    end
end

function Measure_download()
    if args.server == nil then
        print("Please provide a server for download speed test using -s <server> option")
        return
    end
    local null_file = io.open("/dev/null", "w")
    local download_file = io.open("/tmp/download_results", "w")
    local c = cURL.easy{
        url = args.server,
        writefunction = null_file
    }
    if not args.quiet then
        print(string.format("\r%-35s %-10s %-12s %-12s %-10s", "Server", "Total(MB)", "Now(MB)", "Percent(%)", "Speed, Mbps"))
    end
    local start_time = socket.gettime()
    local downloaded_size_mb, end_time, download_speed, total_size_mb, percent_downloaded = 0, 0, 0, 0, 0
    c:setopt_progressfunction(function(dltotal, dlnow)
        downloaded_size_mb = dlnow / 1000000
        end_time = socket.gettime()
        download_speed = downloaded_size_mb * 8 / (end_time - start_time)
        download_file:write(args.server .. "," .. download_speed .. "\n")
        if not args.quiet then
            total_size_mb = dltotal / 1000000
            percent_downloaded = math.floor((dlnow / dltotal * 100) * 100) / 100
            io.write(string.format("\r%-35s %-10s %-12s %-12s %-10s", args.server, total_size_mb, downloaded_size_mb, percent_downloaded, download_speed))
        end
    end)
    c:setopt(cURL.OPT_NOPROGRESS, false)
    assert(c:perform())
    io.write("\n")
    io.close(null_file)
    io.close(download_file)
end

function Measure_upload()
    if args.server == nil then
        print("Please provide a server for upload speed test using -s <server> option")
        return
    end
    local null_file = io.open("/dev/null", "w")
    local upload_file = io.open("/tmp/upload_results", "w")
    local url = Split(args.server, ":")[1] .. "/speedtest/upload.php"
    local c = cURL.easy{
        url = url,
        writefunction = null_file,
        post = true,
        httppost = cURL.form{
            file1 = {
              file = "/tmp/random.dat",
              type = "text/plain",
              name = "upload.lua",
            }
        }
    }
    if not args.quiet then
        print(string.format("\r%-35s %-10s %-12s %-12s %-10s", "Server", "Total(MB)", "Now(MB)", "Percent(%)", "Speed, Mbps"))
    end
    local start_time = socket.gettime()
    local uploaded_size_mb, end_time, upload_speed, total_size_mb, percent_uploaded = 0, 0, 0, 0, 0
    c:setopt_progressfunction(function(_, _, ultotal, ulnow)
        uploaded_size_mb = ulnow / 1000000
        end_time = socket.gettime()
        upload_speed = uploaded_size_mb * 8 / (end_time - start_time)
        upload_file:write(args.server .. "," .. upload_speed .. "\n")
        if not args.quiet then
            total_size_mb = ultotal / 1000000
            percent_uploaded = math.floor((ulnow / ultotal * 100) * 100) / 100
            io.write(string.format("\r%-35s %-10s %-12s %-12s %-10s", args.server, total_size_mb, uploaded_size_mb, percent_uploaded, upload_speed))
        end
    end)
    c:setopt(cURL.OPT_NOPROGRESS, false)
    assert(c:perform())
    io.close(null_file)
    io.close(upload_file)
end

if args.find_servers then Find_servers() end
if args.measure_download then Measure_download() end
if args.measure_upload then Measure_upload() end
